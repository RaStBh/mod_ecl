This file is part of RaSt mod_ecl.

RaSt mod_ecl is an extension module for  the Apache HTTP Server.  It enables the
Apache  HTTP  Server  to  run  scripts written  in  the  Embeddable  Common-Lisp
language.

Copyright (C) 2021 Ralf Stephan (RaSt) <me@ralf-stephan.name>

Copying  and  distribution of  this  file,  with  or without  modification,  are
permitted in any  medium without royalty provided the copyright  notice and this
notice are preserved.  This file is offered as-is, without any warranty.

================================================================================

Contents
--------

About
Install
Usage
Development
Lisp/ECL/ASDF
HTTP verbs and enctype
Copying
Changelog
References
Todo

================================================================================

About
-----

mod_ecl is  a module for  the Apache HTTP  Server which contains  the Embeddable
Common-Lisp interpreter.  You can use it to run Lisp code, like you can run Perl
code with mod_perl or PHP code with mod_php.

The mod_ecl in its current state is a prototype. So it is not yet usable for the
common user.

================================================================================

Install
-------

You can download the source code from:

https://github.com/RaStBh/mod_ecl
https://gitlab.com/RaStBh/mod_ecl

Download the latest Version.

================================================================================

Usage
-----

Apache HTTP Server 2.x configuration:

In your virtual host configuration add  'index.ecl' to the list of the directory
index files:

    DirectoryIndex index.htm index.html index.php index.ecl

Create the /etc/apache2/mods-available/ecl.load file with following content:

    LoadModule ecl_module /usr/lib/apache2/modules/mod_ecl.so

Create the /etc/apache2/mods-available/ecl.conf file with following content:

    # Handle all files with file xtension .ecl by the mod_ecl module.

    <FilesMatch ".+\.ecl$">
        SetHandler application/x-httpd-ecl
    </FilesMatch>

    # Deny access to files without filename (e.g. '.ecl')

    <FilesMatch "^\.ecl$">
        Require all denied
    </FilesMatch>

Enable the extension  module using the a2enmod command.  You  might require root
privileges to do this.

    bash$> a2enmod ecl

Restart the Apache  HTTP Server using the apachectl command.   You might require
root privileges to do this.

    bash$> apachectl restart

Create a file test.ecl in e.g. /var/www/html/ containing some content.

    bash$> touch /var/www/html/mod_ecl/test.ecl

Change to the source directory.

    bash$> cd $DIR/mod_ecl/src/

Compile module using the make command.

    bash$> make

Install module using the make command.  You might require root privileges to do
this.

    bash$> make install

Restart the Apache  HTTP Server using the make command.   You might require root
privileges to do this.

    bashÂ§> make restart

Build  doxygen documentation  using the  make command.   You might  require root
privileges to do this.

    bash$> make doc

Using the lynx command

    bash$> lynx -mime_header http://localhost/mod_ecl/test.ecl

should show an output similar to the following:

    <!DODCTYPE html>
    <html>
        <head>
            <meta charset="utf-8"/>
            <title>RaSt mod_ecl</title>
        </head>
        <body>
            Hello World!<br>
            <br>
            This is the sample page from RaSt mod_ecl!<br>
            <br>
            file name:<br>
            /var/www/html/mod_ecl/test.ecl<br>
            <br>
            file content:<br>
            ===== Begin =====<br>
    Hello from test.ecl!<br>
            ===== END =======<br>
        </body>
    </html>

Configure  your  system to  use  ASDF.   See  section "Lips/ECL/ASDF"  for  more
information.  Configure ASDF  so it finds the .ecl and  .lisp files in /var/www/
html/mod_ecl.lh.ld/  and  writes  compiled  .o and  .fas  files  to  /var/cache/
common-lisp/.

Create  a  symbolic  link  from  Apache  DocumentRoot  directory  /var/www/html/
mod_ecl.lh.ld/ to the ecl / lisp source code directory mod_ecl/doc/ecl/.

As user www-data create  the .o and .fas files for  the ASDF sytem utils-numbers
using:

    ecl> (require "asdf")
    ecl> (asdf:load-system :utils-numbers)

Inspect the output of mod_ecl and index.ecl.

    bash> lynx https://mod_ecl.lh.ld/index.ecl

================================================================================

Development
-----------

My development environment is:

    Ubuntu 20.04.2 LTS (GNU/Linux 5.4.0-70-generic x86_64)
    Apache HTTP Server 2.4.41 (Ubuntu)
    Embeddable Common-Lisp (ECL) 16.1.3
    Embeddable Common-Lisp (ECL) 21.2.1
    Apache Portable Runtime (APR) 1.6.5
    Apache Portable Runtime Utility Library (APR-util) 1.6.1
    Apache HTTP Request Library (apreq)2.13

To create an example module to test your environment you can generate a template
module by using the APache eXtenSion tool (apxs).

Generate template using the apxs command.

    bash$> apxs -g -n ecl

This creates the ecl/ directory and within the template files.

    ecl/.deps
    ecl/Makefile
    ecl/mod_ecl.c
    ecl/modules.mk

Move this files to the $HOME/mod_ecl/src/ source code directory.

Compile the extension module into a DSO file.

    bash> apxs -c ./mod_ecl.c

Then install  the extension  module.  You  might require  root privileges  to do
this.

    bash> apxs -i ./mod_ecl.la

The    extension    module    mod_ecl.so    file    is    installed    in    the
/usr/lib/apache2/modules/ directory.

Create the /etc/apache2/mods-available/ecl.load file with following content:

    LoadModule ecl_module /usr/lib/apache2/modules/mod_ecl.so

Create the /etc/apache2/mods-available/ecl.conf file with following content:

    <IfModule mod_ecl.c>
        <Location /mod_ecl>
            SetHandler ecl
        </Location>
    </IfModule>

Enable the extension  module using the a2enmod command.  You  might require root
privileges to do this.

    bash$> a2enmod ecl

Restart the Apache  HTTP Server using the apachectl command.   You might require
root privileges to do this.

    bash$> apachectl restart

Create the /var/www/html/mod_ecl/ directory.

    bash$> mkdir /var/www/html/mod_ecl/

You now should be able to requet the URLs

    http://localhost/mod_ecl
    http://127.0.0.1/mod_ecl

and you should read the string 'The sample page from mod_ecl.c'.

For example using the lynx command

    bash$> lynx -mime_header http://localhost/mod_ecl/

should show an output similar to the following:

    HTTP/1.1 200 OK
    Date: Wed, 10 Mar 2021 08:10:35 GMT
    Server: Apache/2.4.25 (Debian)
    Content-Length: 31
    Connection: close
    Content-Type: text/html

    The sample page from mod_ecl.c

You can use the make command. You might require root privileges to do this.  But
I will not cover  the usage of make here, I just list  some of the make commands
here.

    bash$> cd $HOME/mod_ecl/src/

    bash$> make

    bash$> make install

    bash$> make test

    bash$> make clean

================================================================================

Lisp/ECL/ASDF
-------------

ECL lisp and fas files
----------------------


/usr/lib/x86_64-linux-gnu/ecl-21.2.1/asdf.fas

cp -r ecl-21.2.1/contrib/ /usr/share/common-lisp/source/ecl-21.2.1/
cp -r ecl-21.2.1/src/clos/ /usr/share/common-lisp/source/ecl-21.2.1/src/
cp -r ecl-21.2.1/src/cmp/ /usr/share/common-lisp/source/ecl-21.2.1/src/
cp -r ecl-21.2.1/src/lsp/ /usr/share/common-lisp/source/ecl-21.2.1/src/



Directories
-----------

    ~/.cache/common-lisp/
    ~/.config/common-lisp/
    ~/.local/share/common-lisp/source/

    /usr/share/common-lisp/source/
    /usr/local/share/common-lisp/source/

    /usr/lib/x86_64-linux-gnu/ecl-21.2.1/

    /var/www/html/mod_ecl.lh.ld/



ECL Quicklisp
-------------

setup

    ecl> (ecl-quicklisp)

~/quicklisp/



Building filse with ECL
-----------------------

create single files:

Portable FASL : fas  :                                  (compile-file "./zip.lisp" :output-file "./zip.fas"  :verbose t :print t :system-p nil)
                                                        (compile-file "./zap.lisp" :output-file "./zap.fas"  :verbose t :print t :system-p nil)
                                                        (compile-file "./zop.lisp" :output-file "./zop.fas"  :verbose t :print t :system-p nil)

                       This removes the object files.

Native FASL   : fasc : (ext:install-bytecodes-compiler) (compile-file "./zip.lisp" :output-file "./zip.fasc" :verbose t :print t :system-p nil) (ext:install-c-compiler)
                       (ext:install-bytecodes-compiler) (compile-file "./zap.lisp" :output-file "./zap.fasc" :verbose t :print t :system-p nil) (ext:install-c-compiler)
                       (ext:install-bytecodes-compiler) (compile-file "./zop.lisp" :output-file "./zop.fasc" :verbose t :print t :system-p nil) (ext:install-c-compiler)

Object file   : o    :                                  (compile-file "./zip.lisp" :output-file "./zip.o"    :verbose t :print t :system-p t)
                                                        (compile-file "./zap.lisp" :output-file "./zap.o"    :verbose t :print t :system-p t)
                                                        (compile-file "./zop.lisp" :output-file "./zop.o"    :verbose t :print t :system-p t)

create bundled file:

Portable FASL : fas  : (c:build-fasl           "./zipzapzop.fas" :lisp-files '("./zip.o" "./zap.o" "./zop.o")                         )

Native FASL   : fasc : ecl> (with-open-file
                                (output "./zipzapzop.fasc"
                                 :direction :output
                                 ;:external-format '(:crlf :utf-8)
                                 :if-exists :supersede
                                 :if-does-not-exist :create
                                )
                                (ext:run-program
                                 "/usr/bin/cat"
                                 '("./zip.fasc" "./zap.fasc" "./zop.fasc")
                                 :output output
                                )
                            )

                       or

                       bash> /usr/bin/cat ./zip.fasc ./zap.fasc ./zop.fasc > ./zipzapzop.fasc

                       ECL can load zipzapzop.fasc.
                       You can call macros from zip.fasc.
                       You can not call macros from zap.fasc
                       You can not call macros from zop.fasc.

                       ASDF contains UIOP which contains combine-fasls.
                       But using combine-fasls results in:
                           Debugger received error of type: NOT-IMPLEMENTED-ERROR
                           Not (currently) implemented on ECL: UIOP/LISP-BUILD:COMBINE-FASLS

Static library: a    : (c:build-static-library "./zipzapzop.a"     :lisp-files '("./zip.o" "./zap.o" "./zop.o") :init-name "init_foobar")

Shared library: so   : (c:build-shared-library "./zipzapzop.so"    :lisp-files '("./zip.o" "./zap.o" "./zop.o") :init-name "init_foobar")

Executable    : bin  : (c:build-program        "./zipzapzop.bin"   :lisp-files '("./zip.o" "./zap.o" "./zop.o")                         )

Image         :      : in ECL not supported



Building fileswith ASDF
-----------------------

ASDF global system configuration

   /etc/common-lisp/source-registry.conf

   (:source-registry
       (:tree "/var/www/html/mod_ecl.lh.ld/")
       :inherit-configuration
   )

ASDF local per user configuration

   ~/.config/common-lisp/source-registry.conf

   (:source-registry
       :inherit-configuration
   )

ASDF source registry cache for each ":tree" in global or loacal configuration.

   ~/mod_ecl/doc/ecl/.cl-source-registry.cache

   (:source-registry-cache
       "utils-numbers/utils-numbers.asd"
   )

   bash> /usr/bin/ecl asdf/tools/cl-source-registry-cache.lisp

ASDF global system configuration

    /etc/common-lisp/asdf-output-translations.conf

    (:output-translations
        (t ("/var/cache/common-lisp/" :implementation))
        :inherit-configuration
    )

ASDF local per user

   ~/.config/common-lisp/asdf-output-translations.conf

    (:output-translations
        :inherit-configuration
    )

ASDF global sytem cache

    /var/cache/common-lisp/

ASDF local per user cache

    ~/.cache/common-lisp/

Symbolic link

    /var/www/html/mod_ecl/ -> /home/vagrant/mod_ecl/doc/ecl/

Portable FASL : fasb : (asdf:make-build :example :type :fasl           :move-here #P"./example.fas/")

                       (asdf:operate 'asdf:compile-bundle-op :example)
                       bash> mv /.cache/common-lisp/ecl-21.2.1-unknown-linux-x64/home/vagrant/mod_ecl/doc/ecl/example/example.fasb \
                             ~/mod_ecl/doc/ecl/example.fasb/example.fasb

                       ~/.cache/common-lisp/ecl-21.2.1-unknown-linux-x64/home/vagrant/mod_ecl/doc/ecl/example/example.fasb

                       (c:build-fasl "example.fasb" :lisp-files '("example.so"))
                       (c:build-fasl "example.fasb" :lisp-files '("example.a"))

Static library: a    : (asdf:make-build :example :type :static-library :move-here #P"./libexample.a/" :monolithic nil :init-name "init_example")
                       (asdf:make-build :example :type :static-library :move-here #P"./libexample.a/" :monolithic t   :init-name "init_example")

                       ~/mod_ecl/doc/ecl/libexample.a/libexample.a

Shared library: so   : (asdf:make-build :example :type :shared-library :move-here #P"./libexample.so/" :monolithic nil :init-name "init_example")
                       (asdf:make-build :example :type :shared-library :move-here #P"./libexample.so/" :monolithic t   :init-name "init_example")

                        ~/mod_ecl/doc/ecl/libexample.so/libexample.so

Executable    : bin  : (asdf:make-build :example :type :program        :move-here #P"./example.bin/"                   :epilogue-code '(progn (require "asdf") (format t "~S~%" "Hello Worls!") (si:exit)))

                       ~/mod_ecl/doc/ecl/libexample.bin/example.bin/example

                       ~/.cache/common-lisp/ecl-21.2.1-unknown-linux-x64/home/vagrant/mod_ecl/doc/ecl/example/

================================================================================

HTTP verbs and enctype
----------------------

HTTP verbs:

from [1626788793]:

    +---------+-------------------------------------------------+-------+
    | Method  | Description                                     | Sec.  |
    +---------+-------------------------------------------------+-------+
    | GET     | Transfer a current representation of the target | 4.3.1 |
    |         | resource.                                       |       |
    | HEAD    | Same as GET, but only transfer the status line  | 4.3.2 |
    |         | and header section.                             |       |
    | POST    | Perform resource-specific processing on the     | 4.3.3 |
    |         | request payload.                                |       |
    | PUT     | Replace all current representations of the      | 4.3.4 |
    |         | target resource with the request payload.       |       |
    | DELETE  | Remove all current representations of the       | 4.3.5 |
    |         | target resource.                                |       |
    | CONNECT | Establish a tunnel to the server identified by  | 4.3.6 |
    |         | the target resource.                            |       |
    | OPTIONS | Describe the communication options for the      | 4.3.7 |
    |         | target resource.                                |       |
    | TRACE   | Perform a message loop-back test along the path | 4.3.8 |
    |         | to the target resource.                         |       |
    +---------+-------------------------------------------------+-------+

from: [1626789081]

                The PATCH method requests that a set of changes
		described in the request entity be applied to
		the resource identified by the Request-URI.

enctype:

    application/x-www-form-urlencoded

    mutlipart/form-data

================================================================================

Copying
-------

// RaSt mod_ecl is  an extension module for the Apache  HTTP Server.  It enables
// the Apache HTTP  Server to run scripts written in  the Embeddable Common-Lisp
// language.
//
// Copyright (C) 2021 Ralf Stephan (RaSt) <me@ralf-stephan.name>
//
// RaSt mod_ecl is free software: you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software
// Foundation, either  version 3 of the  License, or (at your  option) any later
// version.
//
// RaSt mod_ecl is distributed  in the hope that it will  be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR  A PARTICULAR  PURPOSE.   See the  GNU General  Public  License for  more
// details.
//
// You should have received a copy of  the GNU General Public License along with
// this     program     in     the     file    COPYING.      If     not,     see
// <https://www.gnu.org/licenses/>.

================================================================================

Changelog
---------

0.0.0

    Nothing special here.

0.1.0

    This version is a basic Apache HTTP Server extension which does nothing more
    than to output the string "Hello World".

0.1.1

    Introducing  doxygen  for  documentation.  Adding  proper  comments.   Small
    changes to the code.  And other changes.

0.1.2

    Add notes about usage.

0.1.3

    Add missing comment.

0.2.0

    Read file and output its content. And other changes.

0.2.1

    Fix whitespace and spelling.

0.2.2

    Add missing comment.

0.2.3

    Some Refactoring.

0.2.4

    Fix linebreak.

0.3.0

    Eval ECL script and output result.

0.4.0

    * header-in: Get MIME header environment from the request.

    * Functions to searech and replace by string and regex.

0.4.1

    rebase development_of_0.4.0

0.4.2

    header-out: Get MIME header environment from the response.

================================================================================

References
----------

Apache HTTP Server

[LL02]

    Ben Laurie,  Peter Laurie.  Apache:  The Definitive Guide.   O'Reilly Media,
    Inc.  3th Edition.  December 2002.  -- ISBN: 978-0-596-00203-9

[SM99]

    Lincoln Stein,  Doug MacEachern.   Writing Apache Modules  with Perl  and C.
    O'Reilly & Associates, Inc.  March 1999.  -- ISBN: 978-1-565-92567-0

[1615296743]

    The Apache Software Foundation.  The  Apache HTTP Server Project.  2020.  --
    URL: <https://httpd.apache.org/> (online: 2021-03-09 13:32:23 +0000)

[1615297216]

    The   Apache  Software   Foundation.    Apache  HTTP   Server  Version   2.4
    Documentation.    2020.   --   URL:  <https://httpd.apache.org/docs/2.4/en/>
    (online: 2021-03-09 13:40:16 +0000)

    see also:
    /usr/share/doc/apache2-doc/

[1615297807]

    The Apache Software Foundation.  Developer Documentation for the Apache HTTP
    Server   2.4.    2020.    --   URL:   <https://httpd.apache.org/docs/2.4/en/
    developer/> (online: 2021-03-09 13:50:07 +0000)

[1615449618]

    The Apache  Software Foundation.   Module Index.   2020.  --  URL: <https://
    httpd.apache.org/docs/2.4/en/mod/> (online: 2021-03-11 08:00:18 +0000)

[1615449737]

    The Apache Software Foundation.  Apache Module mod_example_hooks.  2020.  --
    URL:       <https://httpd.apache.org/docs/2.4/en/mod/mod_example_hooks.html>
    (online: 2021-03-11 08:02:17 +0000)

    see also:
    httpd-2.4.25\modules\examples\
    httpd-2.4.25\modules\examples\README
    httpd-2.4.25\modules\examples\mod_case_filter.c
    httpd-2.4.25\modules\examples\mod_case_filter_in.c
    httpd-2.4.25\modules\examples\mod_example_hooks.c
    httpd-2.4.25\modules\examples\mod_example_ipc.c

[1615386286]

    The  Apache Software  Foundation.   Apache Module  mod_so.   2020.  --  URL:
    <https://httpd.apache.org/docs/2.4/en/mod/mod_so.html>  (online:  2021-03-10
    14:24:46 +0000)

[1615298253]

    The  Apache Software  Foundation.  Developing  modules for  the Apache  HTTP
    Server   2.4.    2020.    --   URL:   <https://httpd.apache.org/docs/2.4/en/
    developer/modguide.html> (online: 2021-03-09 13:57:33 +0000)

[1615450908]

    The Apache  Software Foundation.  Hook  Functions in the Apache  HTTP Server
    2.x.   2020.  --  URL: <https://httpd.apache.org/docs/2.4/en/developer/hooks
    .html> (online: 2021-03-11 08:21:48 +0000)

[1615451523]

    The  Apache Software  Foundation.   Request Processing  in  the Apache  HTTP
    Server   2.x.    2020.    --   URL:   <https://httpd.apache.org/docs/2.4/en/
    developer/request.html> (online: 2021-03-11 08:32:03 +0000)

[1615569331]

    The Apache Software Foundation.  How filters  work in Apache 2.0.  2020.  --
    URL:  <https://httpd.apache.org/docs/2.4/en/developer/filters.html> (online:
    2021-03-12 17:15:31 +0000)

[1615572244]

    The Apache Software Foundation.  Guide to writing output filters.  2020.  --
    URL:    <https://httpd.apache.org/docs/2.4/en/developer/output-filters.html>
    (online: 2021-03-12 18:04:04 +0000)

[1615617303]

    The Apache Software Foundation.  Documenting  code in Apache 2.4.  2020.  --
    URL:       <https://httpd.apache.org/docs/2.4/en/developer/documenting.html>
    (online: 2021-03-13 06:35:03 +0000)

[1615618803]

    The  Apache  Software Foundation.   Apache  HTTP  Server 2.x  Thread  Safety
    Issues.   2020.   --  URL:  <https://httpd.apache.org/docs/2.4/en/developer/
    thread_safety.html> (online: 2021-03-13 07:00:03 +0000)

[1615625036]

    The Apache Software Foundation.  Dynamic Shared Object (DSO) Support.  2020.
    -- <URL: https://httpd.apache.org/docs/current/dso.html> (online: 2021-03-13
    08:43:56 +0000)

[1615452234]

    The  Apache Software  Foundation.   Apache2 Documentation.   2020.  --  URL:
    <https://ci.apache.org/projects> (online: 2021-03-11 08:43:54 +0000)

[1615451871]

    The Apache Software Foundation.  Apache2  Documentation - Apache HTTP Server
    - Core  routines -  Apache  Hooks.  2020.   -- URL:  <https://ci.apache.org/
    projects/httpd/trunk/doxygen/group__hooks.html> (online: 2021-03-11 08:37:51
    +0000)

[1615619857]

    The Apache Software Foundation.   Apache2 Documentation - Apache Portability
    Runtime library  - Hook  Functions.  2020.  --  URL: <https://ci.apache.org/
    projects/httpd/trunk/doxygen/group__APR__Util__Hook.html>           (online:
    2021-03-13 07:17:37 +0000)

[1615622955]

    The Apache Software Foundation.  Apache2  Documentation - Apache HTTP Server
    - Core routines  - module.  2020.  --  URL: <https://ci.apache.org/projects/
    httpd/trunk/doxygen/group__APACHE__CORE__CONFIG.html
    #ga0ea4f633a5f9f88e1603aaeb1f2b2e69> (online: 2021-03-13 08:09:15 +0000)

[1615623911]

    The Apache Software Foundation.  Apache2  Documentation - Apache HTTP Server
    - Core  routines -  AP_DECLARE_MODULE.   2020.   -- URL:  <https://ci.apache
    .org/projects/httpd/trunk/doxygen/group__APACHE__CORE__CONFIG.html
    #ga662f6bc4b401d52b293a80b1768534af> (online: 2021-03-13 08:25:11 +0000)

[1615309723]

    The Apache  Software Foundation.  apxs  - APache eXtenSion tool.   2020.  --
    URL:    <https://httpd.apache.org/docs/2.4/en/programs/apxs.html>   (online:
    2021-03-09 17:08:43 +0000)

    see also:
    bash$> man 1 apxs
    bash$> info apxs

Apache Portable Runtime

[1616085270]

    The Apache Software Foundation.  The Apache Portable Runtime Project.  2020.
    -- URL: <https://apr.apache.org/> (online: 2021-03-18 16:34:30 +0000)

[1616085431]

    The  Apache  Software  Foundation.   Apache  Portable  Runtime  Version  1.5
    Documentation.    2015.    --  URL:   <https://apr.apache.org/docs/apr/1.5/>
    (online: 2021-03-18 16:37:11 +0000)

[1616085582]

    The  Apache Software  Foundation.  Apache  Portable Runtime  Utility Library
    Version  1.5 Documentation.   2014.   -- URL:  <https://apr.apache.org/docs/
    apr-util/1.5/> (online: 2021-03-18 16:39:42 +0000)

[1616085734]

    The  Apache  Software Foundation.   Apache  Portable  Runtime Iconv  Library
    Version  1.2 Documentation.   2020.   -- URL:  <https://apr.apache.org/docs/
    apr-iconv/1.2/> (online: 2021-03-18 16:42:14 +000)

[1616241868]

    The Apache Software Foundation.  Apache  Portability Runtime library - Error
    Codes - APR Error  Values.  2020.  -- URL: <https://apr.apache.org/docs/apr/
    1.5/ group___a_p_r___error .html> (online: 2021-03-20 12:04:28)

Apache HTTP Request Library

[1616086484]

    The Apache  Software Foundation.   Apache HTTP  Request Library.   2020.  --
    URL: <https://httpd.apache.org/apreq/> (online: 2021-03-18 16:54:44 +0000)

[1616086620]

    The  Apache  Software  Foundation.  libapreq2  Version  2.13  Documentation.
    2010.   --  <URL:  https://httpd.apache.org/apreq/docs/libapreq2/>  (online:
    2021-03-18 16:57:00 +0000)

Apache Tutor

[1616182636]

    Nick  Kew.   Apache  Tutor.  2008.   --  URL:  <http://www.apachetutor.org/>
    (online: 2021-03-19 19:37:16 +0000)

[1616182934]

    Nick Kew.  Developer: Apache  Tutor.  2008.  -- URL: <http://www.apachetutor
    .org/dev/> (online: 2021-03-19 19:42:14 +0000)

[1616224574]

    Nick  Kew.   Request  Processing  in Apache.   2008.   --  URL:  <http://www
    .apachetutor.org/dev/request> (online: 2021-03-20 07:16:14 +0000)

[1616228006]

    Nick  Kew.    Configuration  for   Modules.   2008.   --   URL:  <http://www
    .apachetutor.org/dev/config> (online: 2021-03-20 08:13:26 +000)

[1616230447]

    Nick  Kew.   Resource Management  in  Apache.   2008.  --  URL:  <http://www
    .apachetutor.org/dev/pools> (online: 2021-03-20 08:54:07 +0000)

[1616236695]

    Nick  Kew.   Connection  Pooling  in Apache.   2008.   --  URL:  <http://www
    .apachetutor.org/dev/reslist> (online: 2021-03-20 10:38:15 +0000)

[1616237121]

    Nick Kew.   Introduction to Buckets  and Brigades.  2008.  --  URL: <http://
    www.apachetutor.org/dev/brigades> (online: 2021-03-20 10:45:21 +0000)

[1616238747]

    Nick Kew.  An architecture for smart  filtering in Apache.  -- URL: <http://
    www.apachetutor.org/dev/smart-filter> (online: 2021-03-20 11:12:27 +0000)

Embeddable Common-Lisp

[1616254432]

    Common-Lisp.Net.    Embeddable  Common-Lisp.    2021.   --   URL:  <https://
    common-lisp.net/project/ecl/> (online: 2021-03-20 15:33:52 +0000)

[1616254992]

    Daniel KochmaÅski, Marius Gerbershagen.  ECL Manual 2020.  -- URL: <https://
    common-lisp.net/project/ecl/static/manual/>  (online:   2021-03-20  15:43:12
    +0000)

[1626599366]

    Embeddable  Common-Lisp   main  repository.   --   URL:  https://gitlab.com/
    embeddable-common-lisp/ecl (online: 2021-07-18 09:09:26 +0000)

[1626600165]

    The Distro Tracker Developers ecl -  Debian Package Tracker.  2021.  -- URL:
    https://tracker.debian.org/pkg/ecl (online: 2021-07-18 09:22:45 +0000)

[1626600301]

    SPI Inc..  Debian  -- Informationen Ã¼ber Paket ecl in  buster.  2021 -- URL:
    https://packages.debian.org/buster/ecl (online: 2021-07-18 09:25:01 +0000)

[1626599822]

    ecl   packaging.    --  URL:   https://salsa.debian.org/common-lisp-team/ecl
    (online: 2021-07-18 09:17:02 +0000)

Inoue Seiichiro APR Tutorial

[1616139849]

    Inoue  Seiichiro.  libapr  (apache portable  runtime) programming  tutorial.
    2005.     --   URL:    <http://dev.ariel-networks.com/apr/apr-tutorial/html/
    apr-tutorial.html> (online: 2021-03-19 07:44:09 +0000)

[1616174092]

    Inoue Seiichiro.   sample files.  2005.  --  URL: <http://dev.ariel-networks
    .com/apr/apr-tutorial/sample/> (online: 2021-03-19 17:14:52 +0000)

[1619079595]

   The Common Lisp Cookbook Project.  The  Common Lisp Cookbook.  2007.  -- URL:
   http://cl-cookbook.sourceforge.net/ (online: 2021-04-22 08:19:55 +0000)

[1616174201]

    Inoue   Seiichiro.   sample-util   files.    2005.    --  URL:   <http://dev
    .ariel-networks.com/apr/apr-tutorial/sample-util/>    (online:    2021-03-19
    17:16:41 +0000)

Common Lisp

[Sei05]

    Peter Seibel.  Practical Common Lisp.   2005.  Apress / Springer-Verlag GmbH
    & Co. KG -- ISBN: 1-59059-239-5

[Ste90]

    Guy  L. Steele.   Common Lisp  the Language.   1990.  2nd  Edition.  Digital
    Press -- ISBN:  1-55558-041-6 -- URL: https://www.cs.cmu.edu/Groups/AI/html/
    cltl/cltl2.html (online:  2021-04-22 07:15:30 +0000) --  URL: https://www.cs
    .cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/lang/lisp/doc/
    cltl/cltl_ht.tgz (online: 2021-04-22 07:51:20 +0000)

[1619075374]

    LispWorks Ltd.  Common Lisp  HyperSpec.  2005.  -- URL: http://www.lispworks
    .com/documentation/HyperSpec/Front/index.htm  (online:  2021-04-22  07:09:34
    +0000)   --    URL:   http://ftp.lispworks.com/pub/software_tools/reference/
    HyperSpec-7-0.tar.gz (online: 2021-04-22 07:48:56 +0000)

ASDF

[1626594915]

    Robert P.  Goldman, Francois-Rene  Rideau.  ASDF Manual.   2001 -  2019.  --
    URL: https://common-lisp.net/project/asdf/asdf/ (2021-07-18 07:55:15 +0000)

Louis HÃ¶fler's mod_ecl

[1616138391]

    Louis HÃ¶fler.   mod_ecl for  Apache and embeddable  common lisp.   2010.  --
    URL: <http://mod-ecl.sourceforge.net/index.htm> (online: 2021-03-19 07:19:51
    +0000)

[1616138507]

    Louis HÃ¶fler.   mod_ecl.  2010.  --  URL: <https://sourceforge.net/projects/
    mod-ecl/> (online: 2021-03-19 07:21:47 +0000)

[1616138853]

    CLiki:  the common  lisp wiki.   CLiki: mod_ecl.   2010.  --  URL: <https://
    cliki.net/mod_ecl> (online: 2021-03-19 07:27:33 +0000)

[1616335928]

    CLiki:  the common  lisp  wiki.  ECL  in Apache:  mod_ecl.   2010.  --  URL:
    <https://common-lisp.net/project/ecl/posts/ECL-in-Apache-modecl.html>
    (online: 2021-03-21 14:12:08 +0000)

RFCs / HTTP Request Methods / RESTful Services

[1626788793]

    R. Fielding, J. Reschke.   Hypertext Transfer Protocol (HTTP/1.1): Semantics
    and  Content.  June  2014.  --  URL: https://www.rfc-editor.org/info/rfc7231
    (online:  2021-07-20 13:46:33  +0000) --  URL: https://datatracker.ietf.org/
    doc/html/rfc7231 (online: 2021-07-20 13:47:59 +0000)

[1626789081]

    L.  Dusseault,  J.  Snell.   PATCH Method  for HTTP.   March 2010.   -- URL:
    https://www.rfc-editor.org/info/rfc5789 (online:  2021-07-20 13:51:21 +0000)
    -- URL:  https://datatracker.ietf.org/doc/html/rfc5789  (online:  2021-07-20
    13:49:56 +0000)

[1626790959]

    Todd   Fredrich.    REST   API   Tutorial.   2021.    --   URL   https://www
    .restapitutorial.com/ (online: 2021-07-20 14:22:39 0.71825500 +0000)

================================================================================

Todo
----

* Check the spelling in all files (README; *.c, *.ecl, *.lisp, ...).

* What is the file src/.debs for?

* Is it  better to  use apr_file_read  / apr_file_read_full,  apr_mmap_create or
  apr_bucket_mmap?

* Implement functions to get the data of/for

  URL,
  header,
      request header_in
      response header_out
  body,
  HTTP  verbs/methods
      GET,
      HEAD,
      POST,
      PUT,
      DELETE,
      CONNECT,
      OPTIONS,
      TRACE,
      PATCH
  enctype
      application/x-www-form-urlencoded
      mutlipart/form-data

  see https://www.restapitutorial.com/lessons/httpmethods.html
